#BlueJ class context
comment0.target=Encryptor
comment0.text=\n\ Encryption\n\ @Author\:\ Danylo\ Mirin\n\ @Copyright\ 2018\n\ @Date\:\ 27\ February\ 2018\n\ @Version\:\ 5\n\ @Error\ Codes\:\n\ 1\ \=\ no\ writing\ or\ reading\ access\n\ 2\ \=\ IOException\ -\ writing\ fail\n\ 3\ \=\ File\ Not\ Found\ -\ file(s)\ were\ removed\ midway\ through\ operation\n\ 4\ \=\ IOException\ -\ reading\ fail\n\ 5\ \=\ when\ message\ was\ copied,\ it\ was\ not\ copied\ in\ full.\ Decryption\n\ impossible.\n\ \n\ @Notes\:\n\ If\ you\ and\ your\ partner\ have\ different\ keys,\ one\ of\ you\ needs\ to\ send\ his\ to\ the\ other.\n\ The\ conversion\ file\ wouldn't\ normally\ be\ safe\ -\ intercept\ it\ and\ you're\ done.\ Therefore,\n\ a\ second,\ common\ algorithm\ encrypts\ the\ conversion\ file\ so\ that\ it\ is\ unreadable\ to\ humans\n\ and\ by\ the\ time\ a\ machine\ finds\ a\ decryption\ for\ it,\ your\ message\ will\ already\ go\ through\n\ and\ encryption\ can\ be\ changed\ again\n\ If\ the\ conversion\ file\ is\ empty/nonexistent\ or\ after\ initialisation\ it\ is\ found\ that\ not\ all\n\ characters\ are\ present,\ it\ will\ be\ rewritten.\ This\ WILL\ screw\ with\ decryption\ on\ the\ other\n\ end\!\ You\ will\ have\ to\ pass\ on\ the\ key\ to\ your\ partner\ or\ decryption\ will\ fail\ and\ give\ you\ \n\ gibberish\ answers.\ (encryption\ stored\ in\ l2n.enc)\n
comment1.params=
comment1.target=Encryptor()
comment10.params=line\ encrypt
comment10.target=java.lang.String\ ln(java.lang.String,\ boolean)
comment10.text=This\ method\ is\ gonna\ be\ ugly\ because\ I\ do\ not\ want\ to\ rely\ on\ external\ files
comment2.params=alphabet
comment2.target=Encryptor(java.util.HashMap)
comment3.params=
comment3.target=void\ main()
comment4.params=message
comment4.target=java.lang.String\ encrypt(java.lang.String)
comment4.text=\#Encryption
comment5.params=
comment5.target=void\ generateNewValues()
comment6.params=
comment6.target=java.lang.String\ keyGen()
comment7.params=scrambled
comment7.target=java.lang.String\ decrypt(java.lang.String)
comment8.params=
comment8.target=void\ readFromFile()
comment9.params=
comment9.target=void\ writeToFile()
numComments=11
